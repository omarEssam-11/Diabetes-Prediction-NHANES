# -*- coding: utf-8 -*-
"""SVM diabetes_Project_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxFP2rJZ7e8h-yUnyWKRNMImBcfLQoC6

# **Data Preprocessing**
"""

import pandas as pd
import numpy as py

df = pd.read_csv('diabetes_cleaned_final.csv')

df.shape

df.head()

df.tail()

df.info()

df.describe()

df.describe().T

"""# **Histogram For All Columns**"""

p = df.hist(figsize = (20,20))

"""# **value counts of have_diabetes**"""

color_wheel = {1: "#0392cf",
               2: "#7bc043"}
colors = df["have_diabetes"].map(lambda x: color_wheel.get(x + 1))
print(df.have_diabetes.value_counts())
p=df.have_diabetes.value_counts().plot(kind="bar")

import seaborn as sns
corrmat=df.corr()
sns.heatmap(corrmat, annot=True, linewidths=0.4, fmt='.2g', annot_kws={'size': 7})

"""# **Scaling the data**"""

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
df_copy =  pd.DataFrame(sc_X.fit_transform(df.drop(["have_diabetes"],axis = 1),),
        columns=['age', 'gender', 'race', 'fasting_glucose', 'glycohemoglobin_%',
       'HDL-cholesterol', 'BMX', 'systolic', 'diastolic',
       'family_history', 'total_sugars', 'alb_cr_ratio'])

df_copy.head()

#ohe for race
df_copy = pd.get_dummies(df_copy, columns=['race'])

df_copy.head()

X = df_copy
y = df.have_diabetes -1

print(X.shape)
print(y.shape)

"""# **Test Train Split and Cross Validation methods**"""

#importing train_test_split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

"""# **Support Vector Machine**



"""

from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.metrics import f1_score, precision_score, recall_score

model = SVC(probability=True)
kernel = ['poly', 'rbf', 'sigmoid']
C = [50, 10, 1.0, 0.1, 0.01]
gamma = ['scale']

# define grid search
grid = dict(kernel=kernel,C=C,gamma=gamma)
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
grid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='f1',error_score=0)

grid_result = grid_search.fit(X, y)

svm_pred=grid_result.predict(X_test)

from sklearn.metrics import roc_curve, roc_auc_score
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
y_pred_proba = grid_result.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
roc_auc = roc_auc_score(y_test, y_pred_proba)


plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate (FPR)')
plt.ylabel('True Positive Rate (TPR)')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

train_accuracy = grid_result.score(X_train, y_train)


test_accuracy = grid_result.score(X_test, y_test)

print(f"Training Accuracy: {train_accuracy:.2f}")
print(f"Testing Accuracy: {test_accuracy:.2f}")

if train_accuracy - test_accuracy > 0.1:
    print("The model might be overfitting!")

import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, roc_auc_score
import seaborn as sns


print("Classification Report is:\n",classification_report(y_test,svm_pred))
print("\n F1:\n",f1_score(y_test,svm_pred))
print("\n Precision score is:\n",precision_score(y_test,svm_pred))
print("\n Recall score is:\n",recall_score(y_test,svm_pred))
print("\n Confusion Matrix:\n")
plt.figure(figsize=(6, 4))
sns.heatmap(
    confusion_matrix(y_test, svm_pred),
    annot=True,
    fmt='d',
    cmap='Blues',
    xticklabels=['No Diabetes', 'Diabetes'],
    yticklabels=['No Diabetes', 'Diabetes']
)
plt.title('Confusion Matrix', fontsize=14)
plt.xlabel('Predicted', fontsize=12)
plt.ylabel('Actual', fontsize=12)
plt.show()

import pickle


with open('svm_model.pkl', 'wb') as file:
    pickle.dump(grid_result.best_estimator_, file)

print("done ya khwal pickle!")

# Restore the model
"""with open('svm_model.pkl', 'rb') as file:
    loaded_model = pickle.load(file)

# Test the restored model
loaded_model_predictions = loaded_model.predict(X_test)
print("Done\n", loaded_model_predictions)"""